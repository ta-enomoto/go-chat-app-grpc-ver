// Code generated by goa v3.4.3, DO NOT EDIT.
//
// chatapi gRPC client encoders and decoders
//
// Command:
// $ goa gen chat-api/design

package client

import (
	chatapi "chat-api/gen/chatapi"
	chatapiviews "chat-api/gen/chatapi/views"
	chatapipb "chat-api/gen/grpc/chatapi/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetchatFunc builds the remote method to invoke for "chatapi" service
// "getchat" endpoint.
func BuildGetchatFunc(grpccli chatapipb.ChatapiClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Getchat(ctx, reqpb.(*chatapipb.GetchatRequest), opts...)
		}
		return grpccli.Getchat(ctx, &chatapipb.GetchatRequest{}, opts...)
	}
}

// EncodeGetchatRequest encodes requests sent to chatapi getchat endpoint.
func EncodeGetchatRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*chatapi.GetchatPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chatapi", "getchat", "*chatapi.GetchatPayload", v)
	}
	return NewGetchatRequest(payload), nil
}

// DecodeGetchatResponse decodes responses from the chatapi getchat endpoint.
func DecodeGetchatResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*chatapipb.GoaChatCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("chatapi", "getchat", "*chatapipb.GoaChatCollection", v)
	}
	res := NewGetchatResult(message)
	vres := chatapiviews.GoaChatCollection{Projected: res, View: view}
	if err := chatapiviews.ValidateGoaChatCollection(vres); err != nil {
		return nil, err
	}
	return chatapi.NewGoaChatCollection(vres), nil
}
