// Code generated by goa v3.4.3, DO NOT EDIT.
//
// chatapi HTTP client CLI support package
//
// Command:
// $ goa gen chat-api/design

package client

import (
	chatapi "chat-api/gen/chatapi"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildPostchatPayload builds the payload for the chatapi postchat endpoint
// from CLI flags.
func BuildPostchatPayload(chatapiPostchatBody string) (*chatapi.PostchatPayload, error) {
	var err error
	var body PostchatRequestBody
	{
		err = json.Unmarshal([]byte(chatapiPostchatBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Chat\": \"Aut aliquam consequatur accusamus amet aspernatur et.\",\n      \"Cookie\": \"Non voluptas quisquam.\",\n      \"Id\": \"Non iste expedita ut placeat non.\",\n      \"Member\": \"Temporibus quis.\",\n      \"PostDt\": \"2004-07-15T16:53:58Z\",\n      \"RoomName\": \"Dignissimos saepe.\",\n      \"UserId\": \"Saepe est omnis.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.PostDt", body.PostDt, goa.FormatDateTime))

		if err != nil {
			return nil, err
		}
	}
	v := &chatapi.PostchatPayload{
		ID:       body.ID,
		UserID:   body.UserID,
		RoomName: body.RoomName,
		Member:   body.Member,
		Chat:     body.Chat,
		PostDt:   body.PostDt,
		Cookie:   body.Cookie,
	}

	return v, nil
}
