// source: chatapi.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chatapi.GetchatRequest', null, global);
goog.exportSymbol('proto.chatapi.GoaChat', null, global);
goog.exportSymbol('proto.chatapi.GoaChatCollection', null, global);
goog.exportSymbol('proto.chatapi.PostchatRequest', null, global);
goog.exportSymbol('proto.chatapi.PostchatResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatapi.GetchatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatapi.GetchatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatapi.GetchatRequest.displayName = 'proto.chatapi.GetchatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatapi.GoaChatCollection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatapi.GoaChatCollection.repeatedFields_, null);
};
goog.inherits(proto.chatapi.GoaChatCollection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatapi.GoaChatCollection.displayName = 'proto.chatapi.GoaChatCollection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatapi.GoaChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatapi.GoaChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatapi.GoaChat.displayName = 'proto.chatapi.GoaChat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatapi.PostchatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatapi.PostchatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatapi.PostchatRequest.displayName = 'proto.chatapi.PostchatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatapi.PostchatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatapi.PostchatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatapi.PostchatResponse.displayName = 'proto.chatapi.PostchatResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatapi.GetchatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatapi.GetchatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatapi.GetchatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GetchatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatapi.GetchatRequest}
 */
proto.chatapi.GetchatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatapi.GetchatRequest;
  return proto.chatapi.GetchatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatapi.GetchatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatapi.GetchatRequest}
 */
proto.chatapi.GetchatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatapi.GetchatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatapi.GetchatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatapi.GetchatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GetchatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
};


/**
 * optional sint32 id = 1;
 * @return {number}
 */
proto.chatapi.GetchatRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chatapi.GetchatRequest} returns this
 */
proto.chatapi.GetchatRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatapi.GoaChatCollection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatapi.GoaChatCollection.prototype.toObject = function(opt_includeInstance) {
  return proto.chatapi.GoaChatCollection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatapi.GoaChatCollection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GoaChatCollection.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldList: jspb.Message.toObjectList(msg.getFieldList(),
    proto.chatapi.GoaChat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatapi.GoaChatCollection}
 */
proto.chatapi.GoaChatCollection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatapi.GoaChatCollection;
  return proto.chatapi.GoaChatCollection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatapi.GoaChatCollection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatapi.GoaChatCollection}
 */
proto.chatapi.GoaChatCollection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatapi.GoaChat;
      reader.readMessage(value,proto.chatapi.GoaChat.deserializeBinaryFromReader);
      msg.addField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatapi.GoaChatCollection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatapi.GoaChatCollection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatapi.GoaChatCollection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GoaChatCollection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chatapi.GoaChat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GoaChat field = 1;
 * @return {!Array<!proto.chatapi.GoaChat>}
 */
proto.chatapi.GoaChatCollection.prototype.getFieldList = function() {
  return /** @type{!Array<!proto.chatapi.GoaChat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chatapi.GoaChat, 1));
};


/**
 * @param {!Array<!proto.chatapi.GoaChat>} value
 * @return {!proto.chatapi.GoaChatCollection} returns this
*/
proto.chatapi.GoaChatCollection.prototype.setFieldList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chatapi.GoaChat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chatapi.GoaChat}
 */
proto.chatapi.GoaChatCollection.prototype.addField = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chatapi.GoaChat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chatapi.GoaChatCollection} returns this
 */
proto.chatapi.GoaChatCollection.prototype.clearFieldList = function() {
  return this.setFieldList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatapi.GoaChat.prototype.toObject = function(opt_includeInstance) {
  return proto.chatapi.GoaChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatapi.GoaChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GoaChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    member: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postDt: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatapi.GoaChat}
 */
proto.chatapi.GoaChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatapi.GoaChat;
  return proto.chatapi.GoaChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatapi.GoaChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatapi.GoaChat}
 */
proto.chatapi.GoaChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostDt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatapi.GoaChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatapi.GoaChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatapi.GoaChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.GoaChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostDt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional sint32 id = 1;
 * @return {number}
 */
proto.chatapi.GoaChat.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.chatapi.GoaChat.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string room_name = 3;
 * @return {string}
 */
proto.chatapi.GoaChat.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string member = 4;
 * @return {string}
 */
proto.chatapi.GoaChat.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string chat = 5;
 * @return {string}
 */
proto.chatapi.GoaChat.prototype.getChat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setChat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string post_dt = 6;
 * @return {string}
 */
proto.chatapi.GoaChat.prototype.getPostDt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.GoaChat} returns this
 */
proto.chatapi.GoaChat.prototype.setPostDt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatapi.PostchatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatapi.PostchatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatapi.PostchatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.PostchatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    member: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    postDt: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cookie: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatapi.PostchatRequest}
 */
proto.chatapi.PostchatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatapi.PostchatRequest;
  return proto.chatapi.PostchatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatapi.PostchatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatapi.PostchatRequest}
 */
proto.chatapi.PostchatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMember(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setChat(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostDt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCookie(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatapi.PostchatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatapi.PostchatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatapi.PostchatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.PostchatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMember();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPostDt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCookie();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string room_name = 3;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getRoomName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setRoomName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string member = 4;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getMember = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setMember = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string chat = 5;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getChat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setChat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string post_dt = 6;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getPostDt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setPostDt = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string cookie = 7;
 * @return {string}
 */
proto.chatapi.PostchatRequest.prototype.getCookie = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatapi.PostchatRequest} returns this
 */
proto.chatapi.PostchatRequest.prototype.setCookie = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatapi.PostchatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chatapi.PostchatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatapi.PostchatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.PostchatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatapi.PostchatResponse}
 */
proto.chatapi.PostchatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatapi.PostchatResponse;
  return proto.chatapi.PostchatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatapi.PostchatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatapi.PostchatResponse}
 */
proto.chatapi.PostchatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatapi.PostchatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatapi.PostchatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatapi.PostchatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatapi.PostchatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool field = 1;
 * @return {boolean}
 */
proto.chatapi.PostchatResponse.prototype.getField = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.chatapi.PostchatResponse} returns this
 */
proto.chatapi.PostchatResponse.prototype.setField = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.chatapi);
